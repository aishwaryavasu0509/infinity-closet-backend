How to run?
	1)Download the project 
	2)Run command:  
		npm install
		nodemon start     OR     node index.js


--------------------------------------------------------------------------------------------------------
--------product related routes----------

To get all products:
	GET  http://localhost:5000/api/v1/products/       

Product Filters:
	get by category:
 	GET http://localhost:5000/api/v1/products?category=<your category>&size=<your size>
	// you can mention any number of fields which are avaliable in the schema

	get as per condition:
	GET http://localhost:5000/api/v1/products?originalPrice[gte]=500    (in this way you can mention any number of fields)
	// This gives the products with price greater than or equal to 500
	// [gte] = greater than or equal to
	// [lte] = lesser than or equal to
 	// [lt] = lesser than
	// [gt] = greater than

	get in sorted order:
	GET http://localhost:5000/api/v1/products?sort=originalPrice   (this gives products in sorted order of originalPrice ascending order)
	GET http://localhost:5000/api/v1/products?sort=-originalPrice   (this gives products in sorted order of originalPrice decending order)
	// You can mention any number of fields by apending in this way:      sort=originalPrice,discountedPrice

	 getting only limited fields:
	GET http://localhost:5000/api/v1/products?field=name,price  (this will only return name and the price)

	getting products in pages:
	GET http://localhost:5000/api/v1/products?page=1&limit=10   (this will return first 10 products, and if you change the page number it will return next 10 products skipping the first 10)(you can also increase the limit)



----------------------------------------------------------------------------------------------------------


To add the product:
	POST http://localhost:5000/api/v1/products/
	body as per the Schema mentioned below

To get the single product:
	GET http://localhost:5000/api/v1/products/ID   (this will return only single product)

To update the product:
	PATCH http://localhost:5000/api/v1/products/ID
	and in mention the changes in the body 

To delete the product:
	DELETE http://localhost:5000/api/v1/products/ID


---------------------------------------------------------------------------------------------------------
---------------------------------------CART AND WISHLIST--------------------

To ADD the product to the cart:
  POST http://localhost:5000/api/v1/users/addToCart
  body should contain:
      {
        "userID":"",
        "productID":""
      }


To ADD the product to the wish list:
  POST http://localhost:5000/api/v1/users/addToWishlist
  body should contain:
      {
        "userID":"",
        "productID":""
      }

To DELETE the product from the cart:
  PATCH http://localhost:5000/api/v1/users/removeFromCart
  body should contain:
      {
        "userID":"",
        "productID":""
      }

To DELETE the product from the wish removeFromWishlist:
  PATCH http://localhost:5000/api/v1/users/removeFromCart
  body should contain:
      {
        "userID":"",
        "productID":""
      }

To get the items in the cart:
	GET http://localhost:5000/api/v1/users/cartItems?id=id1,id2    (this returns the product with the mentioned IDs)


To get the items in the wishlist:
	GET http://localhost:5000/api/v1/users/wishlistItems?id=id1,id2    (this returns the product with the mentioned IDs)


---------------------------------------------------------------------------------------------
DELETING AND RESTORING PRODUCTS BASED ON CATEGORY/BRAND

To delete a product based on a category
  PATCH http://localhost:5000/api/v1/products/deleteCategory
  body should contain:
  {
    "category":""
  }

To restore a product based on category
  PATCH http://localhost:5000/api/v1/products/restoreCategory
  body should contain:
  {
    "category":""
  }

To delete a product based on a brand
  PATCH http://localhost:5000/api/v1/products/deleteBrand
  body should contain:
  {
    "brand":""
  }

To restore a product based on brand
  PATCH http://localhost:5000/api/v1/products/restoreBrand
  body should contain:
  {
    "brand":""
  }

--------------------------------------------------------------------------------------------
-----------------------Product RENT/ORDER routes--------------------------------------------

To create a new order 
  POST http://localhost:5000/api/v1/orders
  body should contain the data mentioned below in the schema

To update the order status:
  PATCH http://localhost:5000/api/v1/orders/<orderID>
  body should contain:
  {
    "<>":"<>"
  }

To get all the details of all the orders:
  GET http://localhost:5000/api/v1/orders

To get details of only one order:
  GET http://localhost:5000/api/v1/orders/<orderID>

To get the orders of the particular user:
  GET http://localhost:5000/api/v1/orders/getuserorders?id=id1,id2
  (the array of orderID will be in the user schema)
  (whenever the user makes a new order, the order ID will be stored in his collection)



--------------------------------------------------------------------------------------
-----------Product Schema--------------------------------

  {
    name: {
      type: String,
      required: [true, "A product must have a name"],
      trim: true,
      maxlength: [40, "A product name must have less than 40 characters"],
      minlength: [6, "A product name must have more than 6 characters"],
    },
    originalPrice: {
      type: Number,
      required: [true, "A product must have originalPrice"],
    },
    discountedPrice: {
      type: Number,
      required: [true, "A product must have discountedPrice"],
      validate:{
        validator:function(value) {
          // This only ppoints while creating NEW doc and not updating
          return value<this.originalPrice;
        },
        message: "Discount price {{VALUE}} must be less than  regular price"
      }
    },
    inStock: {
      type: Boolean,
      default: true,
    },
    description: {
      type: String,
      required: [true, "A product must have description"],
      trim: true,
    },
    size: {
      type: String,
      required: [true, "A product must have size"],
      trim: true,
    },
    color: {
      type: String,
      required: [true, "A product must have color"],
      trim: true,
    },
    brand: {
      type: String,
      trim: true,
    },
    occasion: {
      type: String,
      required: [true, "A product must have occasion"],
      trim: true,
    },
    season: {
      type: String,
      required: [true, "A product must have season"],
      trim: true,
    },
    category: {
      type: String,
      required: [true, "A product must have category"],
      trim: true,
    },
  }
